GHC_DIR=/opt/ghc

VERSIONS=`/bin/ls ${GHC_DIR}`
GHC_CONFIG_DIR=${HOME}/.ghc-config
CURR_VERSION_FILE=${GHC_CONFIG_DIR}/current

function set_ghc_path()
{
  # Set new GHC version in environment and in current version file
  GHC_VERSION=${1}
  echo -n "${GHC_VERSION}" > ${CURR_VERSION_FILE}

  # Remove any old GHC paths
  PATH=`echo ${PATH} | sed "s|${GHC_DIR}/[^:]*||g" | sed "s/::/:/g" | sed "s/^://" | sed "s/:$//"`

  # Set new GHC path
  GHC_PATH=${GHC_DIR}/${GHC_VERSION}/bin

  # Append a new one to the path
  PATH=${PATH}:${GHC_PATH}

  # Link to the cabal-install configuration directory
  CABAL_DIR=${HOME}/.cabal
  rm -f ${CABAL_DIR}
  ln -s ${GHC_CONFIG_DIR}/${GHC_VERSION}/cabal ${CABAL_DIR}
  unset CABAL_DIR
}

function usage()
{
(
  INIT="1"
  STR="Usage: ghc-config "

  for v in ${VERSIONS}
  do

    if [ "${INIT}" = "0" ]; then STR+="|"; fi
    INIT="0"

    if [ "${v}" = "${GHC_VERSION}" ]
    then
      STR+="[${v}]"
    else
      STR+="${v}"
    fi

  done

  echo ${STR}
)
}

# Get current version from a file
if [ -e ${CURR_VERSION_FILE} ]
then
  CURR_VERSION=`cat ${CURR_VERSION_FILE}`
else
  CURR_VERSION=""
fi

# Test argument and do appropriate things
if [ "${1}" = "" ]
then

  if [ "${CURR_VERSION}" = "" ]
  then
    # No arg and no current version, so be sure env is clean
    unset GHC_VERSION
    unset GHC_PATH
  else
    # No arg but current version exists, so be sure path is set up correctly
    set_ghc_path ${CURR_VERSION}
  fi

  usage

else
  # Arg given, so check validity

  SUCCESS="0"

  for v in ${VERSIONS}
  do
    if [ "${v}" = "${1}" ]
    then
      set_ghc_path ${1}
      SUCCESS="1"
      break
    fi
  done

  if [ "${SUCCESS}" = "0" ]
  then
    echo "Invalid version: ${1}"
    usage
  else
    echo "You are now using GHC ${GHC_VERSION}."
  fi

  unset SUCCESS

fi

unset set_ghc_path
unset usage
unset CURR_VERSION
unset CURR_VERSION_FILE
unset VERSIONS
unset GHC_CONFIG_DIR
unset GHC_DIR
